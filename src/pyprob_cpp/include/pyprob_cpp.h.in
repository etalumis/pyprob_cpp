#ifndef pyprob_cpp_H
#define pyprob_cpp_H
#include <string>
#include "xtensor/xarray.hpp"
#include "xtensor/xio.hpp"
#include "ppx_generated.h"
#include <zmq.hpp>
#include <random>

#define VERSION "@VERSION@"
#define GIT_BRANCH "@GIT_BRANCH@"
#define GIT_COMMIT_HASH "@GIT_COMMIT_HASH@"

#define NONE_VALUE 17081023.17081023f

namespace pyprob_cpp
{
  extern std::default_random_engine generator;
  namespace distributions
  {
    class Distribution
    {
    public:
      virtual xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      virtual void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class Uniform: public Distribution
    {
    private:
      xt::xarray<double> low;
      xt::xarray<double> high;

    public:
      Uniform(xt::xarray<double> low=xt::xarray<double> {0}, xt::xarray<double> high=xt::xarray<double> {1});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class Normal: public Distribution
    {
    private:
      xt::xarray<double> mean;
      xt::xarray<double> stddev;

    public:
      Normal(xt::xarray<double> mean=xt::xarray<double> {0}, xt::xarray<double> stddev=xt::xarray<double> {1});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class Categorical: public Distribution
    {
    private:
      xt::xarray<double> probs;

    public:
      Categorical(xt::xarray<double> probs=xt::xarray<double> {1});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class Poisson: public Distribution
    {
    private:
      xt::xarray<double> rate;

    public:
      Poisson(xt::xarray<double> rate=xt::xarray<double> {0});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class Bernoulli: public Distribution
    {
    private:
      xt::xarray<double> probs;

    public:
      Bernoulli(xt::xarray<double> probs=xt::xarray<double> {1});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class Beta: public Distribution
    {
    private:
      xt::xarray<double> concentration1;
      xt::xarray<double> concentration0;

    public:
      Beta(xt::xarray<double> concentration1=xt::xarray<double> {0}, xt::xarray<double> concentration0=xt::xarray<double> {1});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class Exponential: public Distribution
    {
    private:
      xt::xarray<double> rate;

    public:
      Exponential(xt::xarray<double> rate=xt::xarray<double> {0});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class Gamma: public Distribution
    {
    private:
      xt::xarray<double> concentration;
      xt::xarray<double> rate;

    public:
      Gamma(xt::xarray<double> concentration=xt::xarray<double> {0}, xt::xarray<double> rate=xt::xarray<double> {1});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class LogNormal: public Distribution
    {
    private:
      xt::xarray<double> loc;
      xt::xarray<double> scale;

    public:
      LogNormal(xt::xarray<double> loc=xt::xarray<double> {0}, xt::xarray<double> scale=xt::xarray<double> {1});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class Binomial: public Distribution
    {
    private:
      xt::xarray<double> total_count;
      xt::xarray<double> probs;

    public:
      Binomial(xt::xarray<double> total_count=xt::xarray<double> {0}, xt::xarray<double> probs=xt::xarray<double> {1});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };

    class Weibull: public Distribution
    {
    private:
      xt::xarray<double> scale;
      xt::xarray<double> concentration;

    public:
      Weibull(xt::xarray<double> scale=xt::xarray<double> {0}, xt::xarray<double> concentration=xt::xarray<double> {1});
      xt::xarray<double> sample(const bool control, const std::string& address, const std::string& name);
      void observe(xt::xarray<double> value, const std::string& address, const std::string& name);
    };
  }

  class Model
  {
  private:
    xt::xarray<double> (*modelFunction)();
    std::string serverAddress;
    std::string modelName;
    std::string systemName;

  public:
    Model(xt::xarray<double> (*modelFunction)(), const std::string& modelName);
    void startServer(const std::string& serverAddress = "tcp://*:5555");
  };

  xt::xarray<double> sample(distributions::Distribution& distribution);
  xt::xarray<double> sample(distributions::Distribution& distribution, const std::string& name);
  xt::xarray<double> sample(distributions::Distribution& distribution, const bool control);
  xt::xarray<double> sample(distributions::Distribution& distribution, const bool control, const std::string& name);
  void observe(distributions::Distribution& distribution, xt::xarray<double> value);
  void observe(distributions::Distribution& distribution, const std::string& name);
  void observe(distributions::Distribution& distribution, xt::xarray<double> value, const std::string& name);
  void tag(xt::xarray<double> value);
  void tag(xt::xarray<double> value, const std::string& name);

  void setDefaultControl(bool control = true);

  xt::xarray<double> TensorToXTensor(const ppx::Tensor* protocolTensor);

  flatbuffers::Offset<ppx::Tensor> XTensorToTensor(flatbuffers::FlatBufferBuilder& builder, xt::xarray<double> xtensor);

  void sendMessage(flatbuffers::Offset<ppx::Message> message);

  std::string demangleAddress(std::string address);

  std::string extractAddress();
}

#endif
